
SIGNALS is C

A signal is a software geerated interrupt that is sent toa process by the OS
because of when user, for example, press Ctrl-c or another process tells
something to the process. 

There are fix set of signals that can be sent to a process. signals are identified
by integers. 
Signal numbers have symbolic names. For example SIGCHLD is a number of the 
signal sent to the parent process when child terminates (as seen in previous examples).

Examples

#define SIGHUP  1   /* Hangup the process */ 
#define SIGINT  2   /* Interrupt the process */ 
#define SIGQUIT 3   /* Quit the process */ 
#define SIGILL  4   /* Illegal instruction. */ 
#define SIGTRAP 5   /* Trace trap. */ 
#define SIGABRT 6   /* Abort. */

These are some of the key points to understand about signals in c

	1. Signal Basics
		- Signals represent asynchronous events that can occur at any
		time during the execution of a program. When a signal occurs, the 
		Operatinf System interrupts the normal flow of the program and 
		delivers the signal to the process.  

	2. Signal Handling
		- This involves defining hoe a process should respond to a specific
		signal. signal handling is performed using signal hadlers, which are 
		functions that are invoked when a particular signal occurs. A signal
		handler can pform custom actions, ignore the signal or restore the 
		default behaviour. 

	3. Signal numbers
		- Each signal is identified by a unique signal number. Signal numbers
		are defined as constants in C library 'signals.h'. For example, 'SIGINT'
		is the signal number for the interrupt signal(Ctr+c).

	4. Handling sugnals with signal()
		- The signal() function is used to stablish a sigal handler for a specific
		signal. It takes two arguments: The signal number and the function pointer 
		to the signal handler. 

	5. Default Signal Handlin 
		- Each signal has a default behavior defined by the operatig system (terminate 
		process, ignore signal...). By setting a signal handler, you can override the 
		default behaviour and define custom actions. 

	6. Handling signals with sigaction()
		- The sigaction() function provides a more advanced and reliable way to handle
		signals compared to signal(). It allows more control over the behaviour of
		signals and includes other features. 

Overall Signals provide a mechanism for interprocesses communication, error handling and
managing program execution flow in reesponse to external events.  

FUNCTIONS NEEDED IN MINITALK

	- signal()
		- SIGUSR1
		- SIGUSR2
	- sigemptyset()
	- sigaddset()
	- sigaction()
	- kill()
	- getpid()
	- pause()
	- sleep()
	- usleep()
	- exit()